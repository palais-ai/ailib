#ifndef AI_GLOBAL_H
#define AI_GLOBAL_H

#pragma once

#ifdef _MSC_VER
    #define __func__ __FUNCTION__
#endif

#if defined _WIN32 || defined __CYGWIN__
  #ifdef IS_SHARED_LIBRARY
    #ifdef defined(__GNUC__) || defined(__clang__)
      #define DLL_PUBLIC __attribute__ ((dllexport))
    #else
      #define DLL_PUBLIC __declspec(dllexport)
    #endif
  #else
    #if defined(__GNUC__) || defined(__clang__)
      #define DLL_PUBLIC __attribute__ ((dllimport))
    #else
      #define DLL_PUBLIC __declspec(dllimport)
    #endif
  #endif
  #define DLL_LOCAL
#else
  #if __GNUC__ >= 4 || defined(__clang__)
    #define DLL_PUBLIC __attribute__ ((visibility ("default")))
    #define DLL_LOCAL  __attribute__ ((visibility ("hidden")))
  #else
    #define DLL_PUBLIC
    #define DLL_LOCAL
  #endif
#endif

#ifdef _MSC_VER
    #define FORCE_INLINE __forceinline
#elif defined(__GNUC__) || defined(__clang__)
    #define FORCE_INLINE __inline__ __attribute__((always_inline))
#else
    #define FORCE_INLINE inline
#endif

#if defined(__GNUC__) || defined(__clang__)
    #define LIKELY(x)      __builtin_expect(!!(x), 1)
    #define UNLIKELY(x)    __builtin_expect(!!(x), 0)
#else
    #define LIKELY(x) (x)
    #define UNLIKELY(x) (x)
#endif

#define UNUSED(x__) (void)( (x__) );

#include <cassert>

#define AI_ASSERT(x__, text__) assert((x__) && (text__))

/*
Based on boost's STATIC_ASSERT.

LICENSE:

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
namespace ai_private
{
template <bool> struct STATIC_ASSERTION_FAILURE;
template <> struct STATIC_ASSERTION_FAILURE<true>{};
template<int> struct static_assert_test{};

#define STATIC_ASSERT( x ) \
    typedef ai_private::static_assert_test< sizeof(ai_private::STATIC_ASSERTION_FAILURE< (bool)(x) >) > \
            static_assert_typedef;
}

#define BEGIN_NS_AILIB namespace ailib {
#define END_NS_AILIB }

BEGIN_NS_AILIB
typedef float real_type;
END_NS_AILIB

#endif // AI_GLOBAL_H
